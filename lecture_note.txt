- html, con 객체는 외부에서 보이기에 같아보인다
  이유는 객체의 시그니쳐는 메소드에 있는데
  두 객체 모두 init, render 메소드를 가진다

# Class의 탄생
  : 객체간 일치하는 정체성을 Class라 한다

# Interface 존재 이유
  : 객체를 사용하는 입장과의 약속

# Interface 는 사용자 측의 입장으로 만들어진다
# 객체의 정체성은 사용자 입장에서 정한다


//////////////////////////////////////////////

- 객체: 다형성(폴리모피즘)

# 다형성: 형이란 type 이라기 보다는 역할에 가깝다.
  - 대체가능성
    : 형은 병력적 관계(사장, 아버지 등등..)와 종속적관계(나는 선생이기도 하고 남자이기도 하다(종속적 관계, 하나의 부분집합,
    계층적관계,  hierarch) 가있는데 이중 종속적 관계일때 성립한다

  - 내적동질성

/////////////////////////////////////////////

왜

1> a = a + 3;
같은 코드로 만들지 않고

2> this.a = this.a + 3;

왜 코드를 2>와 같은 형태로 만드는가?

우선 1>은 +3 하는 로직의 재활용이 불가하다

재활용하기 위해 함수로 만들어보자

function k(x) {
  return x + 3;
}

이 함수는

a = k(v) 형식으로 사용한다.

이는 재할당이 이루어지는 형태인데

값일 경우는 괜찮으나 객체일 경우 새로운 값이 들어오지 않고

객체의 내용만 변경되어 문제가 발생한다

a = {v: 3}

a.v = a.v + 3;

function k(x) {
  x.v = x.v + 3;
}

리턴값이 없으므로(프로시져) 외부 관찰이 힘들다.

객체를 써야하는 이유는 스코프를 한정해서 관리하기 위함이다.

그래서 매쏘드를 쓰는것이고 따라서 1>과 같이

특정한 키워드를 쓰지 않고 컨텍스트(this)에 의존하도록 알고리즘을 개편하는 이유이다.

# method: 컨텍스트에 제네릭한 함수

